from typing import Any, Dict, List
import sympy
import numpy as np

def evaluate_solution(user_output: str, expected_output: str, problem_type: str = "numerical") -> Dict[str, Any]:
    """Evaluates the user's solution against the expected output.

    Args:
        user_output: The output generated by the user's code.
        expected_output: The expected output for the problem.
        problem_type: Type of problem ('numerical', 'symbolic', etc.).

    Returns:
        A dictionary with evaluation results.
    """
    if problem_type == "numerical":
        try:
            user_val = float(user_output.strip())
            expected_val = float(expected_output.strip())
            if abs(user_val - expected_val) < 1e-6:  # Tolerance for float comparison
                return {"status": "Correct", "message": "Numerical result is correct.", "details": {"user": user_val, "expected": expected_val}}
            else:
                return {"status": "Wrong Answer", "message": "Numerical result is incorrect.", "details": {"user": user_val, "expected": expected_val}}
        except ValueError:
            return {"status": "Error", "message": "Could not parse numerical output.", "details": {"user": user_output, "expected": expected_output}}
    elif problem_type == "symbolic":
        try:
            user_expr = sympy.sympify(user_output.strip())
            expected_expr = sympy.sympify(expected_output.strip())
            if sympy.simplify(user_expr - expected_expr) == 0:
                return {"status": "Correct", "message": "Symbolic expression is equivalent.", "details": {"user": str(user_expr), "expected": str(expected_expr)}}
            else:
                return {"status": "Wrong Answer", "message": "Symbolic expression is not equivalent.", "details": {"user": str(user_expr), "expected": str(expected_expr)}}
        except (sympy.SympifyError, TypeError):
            return {"status": "Error", "message": "Could not parse symbolic expression.", "details": {"user": user_output, "expected": expected_output}}
    else:
        return {"status": "Not Implemented", "message": f"Evaluation for problem type '{problem_type}' is not implemented."}
